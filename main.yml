---
- name: Deploy Golang boilerplate application
  hosts: hng
  become: yes
  vars:
    app_dir: /opt/stage_5b
    log_dir: /var/log/stage_5b
    repo_url: "https://github.com/hngprojects/hng_boilerplate_golang_web"
    db_password: password

  tasks:
    - name: Create hng user
      user:
        name: hng
        groups: sudo
        shell: /bin/bash

    - name: Install required packages
      apt:
        name:
          - git
          - postgresql
          - postgresql-contrib
        state: present
        update_cache: yes

    - name: Install Nginx 1.26
      block:
        - name: Add Nginx signing key
          apt_key:
            url: https://nginx.org/keys/nginx_signing.key
            state: present
        - name: Add Nginx repository
          apt_repository:
            repo: deb https://nginx.org/packages/ubuntu/ jammy nginx
            state: present
            filename: nginx
        - name: Install Nginx 1.26
          apt:
            name: nginx=1.26.*
            state: present
            update_cache: yes

    - name: Remove any existing Go installations
      apt:
        name: golang*
        state: absent

    - name: Download Go 1.20
      get_url:
        url: https://golang.org/dl/go1.20.linux-amd64.tar.gz
        dest: /tmp/go1.20.linux-amd64.tar.gz

    - name: Extract Go 1.20
      unarchive:
        src: /tmp/go1.20.linux-amd64.tar.gz
        dest: /usr/local
        remote_src: yes

    - name: Set up Go environment
      lineinfile:
        path: /etc/profile.d/go.sh
        line: 'export PATH=$PATH:/usr/local/go/bin'
        create: yes

    - name: Source Go environment
      shell: source /etc/profile.d/go.sh
      args:
        executable: /bin/bash

    - name: Verify Go installation
      shell: /usr/local/go/bin/go version
      register: go_version
      changed_when: false

    - name: Display Go version
      debug:
        var: go_version.stdout

    - name: Set Git safe directory
      command: git config --global --add safe.directory {{ app_dir }}

    - name: Ensure app directory exists
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Clone repository
      git:
        repo: "{{ repo_url }}"
        version: devops
        dest: "{{ app_dir }}"
        force: yes
    
    - name: copy .env file to the app directory    
      copy:                                       
        src: app-sample.env                        
        dest: /opt/stage_5b/app.env               

    - name: Set ownership of app directory
      file:
        path: "{{ app_dir }}"
        owner: hng
        group: hng
        recurse: yes

    - name: Build Golang application
      become: yes
      shell: |
        cd {{ app_dir }}
        /usr/local/go/bin/go build -buildvcs=false -o app
      environment:
        PATH: "{{ ansible_env.PATH }}:/usr/local/go/bin"
      register: build_output

    - name: Display build output
      debug:
        var: build_output

    - name: Set ownership of built application
      become: yes
      file:
        path: "{{ app_dir }}/app"
        owner: hng
        group: hng
        mode: '0755'

    - name: Install PostgreSQL Python package
      apt:
        name: python3-psycopg2
        state: present
 
    - name: Install ACL, required for Ansible Super User
      apt: 
        name: acl 
        state: present 
        
    - name: Check if PostgreSQL data directory is initialized
      stat:
        path: /var/lib/postgresql/14/main/PG_VERSION
      register: pg_version_file

    - name: Display initialization status
      debug:
        msg: "PostgreSQL data directory is initialized."
      when: pg_version_file.stat.exists

    - name: Re-initialize PostgreSQL data directory if not initialized
      shell: /usr/lib/postgresql/14/bin/initdb -D /var/lib/postgresql/14/main
      when: not pg_version_file.stat.exists
      become_user: postgres

    - name: Configure PostgreSQL authentication to use md5            
      lineinfile:
        path: /etc/postgresql/14/main/pg_hba.conf
        regexp: '^local\s+all\s+all\s+peer$'
        line: 'local   all             all                                     md5'
        state: present
      become_user: postgres
      notify: Restart postgres

    - name: Allow remote connections in pg_hba.conf
      lineinfile:
        path: "/etc/postgresql/14/main/pg_hba.conf"
        regexp: '^host\s+all\s+all\s+127.0.0.1/32\s+md5$'
        line: 'host    all             all             0.0.0.0/0               md5'
        state: present
      become_user: postgres
      notify: Restart postgres

    - name: Configure PostgreSQL to listen on all addresses
      lineinfile:
        path: "/etc/postgresql/14/main/postgresql.conf"
        regexp: '^#listen_addresses =.*'
        line: "listen_addresses = '*'"
        state: present
      become_user: postgres
      notify: Restart postgres

    - name: Reload PostgreSQL configuration
      service:
        name: postgresql
        state: reloaded
        
    - name: Create PostgreSQL database
      postgresql_db:
        name: boilerplate_db
        state: present
      become_user: postgres

    - name: Create PostgreSQL user
      postgresql_user:
        name: boilerplate_user
        db: boilerplate_db
        password: "{{ db_password }}"
        state: present
      become_user: postgres

    - name: Grant privileges to user
      postgresql_privs:
        type: database
        database: boilerplate_db
        roles: boilerplate_user
        priv: ALL
        grant_option: false
      become_user: postgres
      
    - name: Ensure /var/secrets directory exists
      become: yes
      file:
        path: /var/secrets
        state: directory
        mode: '0700'

    - name: Save PostgreSQL credentials
      become: yes
      copy:
        content: "Username: boilerplate_user\nPassword: {{ db_password }}"
        dest: /var/secrets/pg_pw.txt
        mode: '0600'

    - name: Set up RabbitMQ
      apt:
        name: rabbitmq-server
        state: present

    - name: Configure Nginx
      copy:
        content: |
          server {
              listen 80;
              server_name _;
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }
          }
        dest: /etc/nginx/conf.d/default.conf
      notify: Reload Nginx

    - name: Create log directory
      file:
        path: "{{ log_dir }}"
        state: directory
        owner: hng
        group: hng
        mode: '0755'

    - name: Set up application service
      copy:
        content: |
          [Unit]
          Description=Golang Boilerplate Application
          After=network.target

          [Service]
          User=hng
          WorkingDirectory={{ app_dir }}
          Environment="PORT=3000"
          Environment="DATABASE_URL=postgresql://boilerplate_user:{{ db_password }}@localhost/boilerplate_db"
          Environment="RABBITMQ_URL=amqp://localhost"
          ExecStart={{ app_dir }}/app
          Restart=always
          StandardOutput=append:{{ log_dir }}/out.log
          StandardError=append:{{ log_dir }}/error.log

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/boilerplate_app.service
      notify: Restart application

    - name: Enable and start application service
      systemd:
        name: boilerplate_app
        enabled: yes
        state: started

    - name: Enable and start Nginx
      systemd:
        name: nginx
        enabled: yes
        state: started

  handlers:
    - name: Restart postgres
      systemd:
        name: postgresql
        state: restarted

    - name: Reload Nginx
      systemd:
        name: nginx
        state: reloaded

    - name: Restart application
      systemd:
        name: boilerplate_app
        state: restarted
        daemon_reload: yes
